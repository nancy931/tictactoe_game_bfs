import queue
import time  # Importing the time module

# Print board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

# Winner Condition
def is_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

# Check End game Condition
def is_draw(board):
    for row in board:
        if " " in row:
            return False
    return True

# Valid Move Condition
def is_valid_move(board, row, col):
    return 0 <= row < 3 and 0 <= col < 3 and board[row][col] == " "

# AI Move Using BFS
def bfs_ai_move(board, player):
    q = queue.Queue()
    q.put(board)

    while not q.empty():
        current_board = q.get()

        for row in range(3):
            for col in range(3):
                if current_board[row][col] == " ":
                    new_board = [row[:] for row in current_board]
                    new_board[row][col] = player
                    if is_winner(new_board, player):
                        return row, col
                    q.put(new_board)

    return None  # If no winning move is found, return None

# Main Game
def play_tic_tac_toe():
    # Ask for player names and their choice of "X" and "O"
    print("Welcome to Tic-Tac-Toe!")
    player_x = input("Enter the name of Player X: ")
    player_o = input("Enter the name of Player O: ")

    # Assign players to symbols
    players = [player_x, player_o]
    symbols = ["X", "O"]
    
    # Initialize the board
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = 0  # Start with Player X

    while True:
        print_board(board)

        if current_player == 0:
            row = int(input(f"{players[0]} (X), enter row (0-2): "))
            col = int(input(f"{players[0]} (X), enter column (0-2): "))
        else:
            print(f"{players[1]} (O), AI is making a move...")

            # Start the timer to calculate AI's computational time
            start_time = time.time()

            ai_move = bfs_ai_move(board, symbols[1])  # BFS Algorithm for AI
            if ai_move:
                row, col = ai_move
            else:
                print(f"{players[1]} (AI) couldn't find a winning move, making a random move.")
                # Implement a more advanced AI algorithm here.
                row, col = 0, 0  # For simplicity, making a random move.

            # End the timer
            end_time = time.time()

            # Calculate and display the elapsed time for AI's move
            elapsed_time = end_time - start_time
            print(f"AI made its move in {elapsed_time:.6f} seconds.")

        if is_valid_move(board, row, col):
            board[row][col] = symbols[current_player]

            if is_winner(board, symbols[current_player]):
                print_board(board)
                print(f"Congratulations! {players[current_player]} ({symbols[current_player]}) wins!")
                break

            if is_draw(board):
                print_board(board)
                print("It's a draw!")
                break

            current_player = 1 - current_player  # Switch player

        else:
            print("Invalid move. Please try again.")

# Main function
if __name__ == "__main__":
    play_tic_tac_toe()
